contract Bemamusic {
    
    address public owner;
    uint public assetCount;
    mapping(uint => Asset) public assets;
    mapping(uint => bool) public assetIsOwned;
    
    struct Asset {
        uint id;
        string title;
        string artist;
        string album;
        uint releaseYear;
        uint price;
        bool isForSale;
        bool isStreamable;
        address payable owner;
    }
    
    constructor() {
        owner = msg.sender;
    }
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }
    
    event AssetAdded(uint id, string title, string artist, string album, uint releaseYear, uint price, bool isForSale, bool isStreamable, address owner);
    event AssetUpdated(uint id, string title, string artist, string album, uint releaseYear, uint price, bool isForSale, bool isStreamable, address owner);
    event AssetBought(uint id, address buyer);
    event AssetStreamed(uint id, address streamer);
    
    function addAsset(string memory _title, string memory _artist, string memory _album, uint _releaseYear, uint _price, bool _isForSale, bool _isStreamable) public onlyOwner {
        assetCount++;
        assets[assetCount] = Asset(assetCount, _title, _artist, _album, _releaseYear, _price, _isForSale, _isStreamable, msg.sender);
        emit AssetAdded(assetCount, _title, _artist, _album, _releaseYear, _price, _isForSale, _isStreamable, msg.sender);
    }
    
    function updateAsset(uint _id, string memory _title, string memory _artist, string memory _album, uint _releaseYear, uint _price, bool _isForSale, bool _isStreamable) public {
        require(msg.sender == owner || msg.sender == assets[_id].owner, "Only the owner or asset owner can update assets.");
        assets[_id].title = _title;
        assets[_id].artist = _artist;
        assets[_id].album = _album;
        assets[_id].releaseYear = _releaseYear;
        assets[_id].price = _price;
        assets[_id].isForSale = _isForSale;
        assets[_id].isStreamable = _isStreamable;
        emit AssetUpdated(_id, _title, _artist, _album, _releaseYear, _price, _isForSale, _isStreamable, msg.sender);
    }
    
    function buyAsset(uint _id) public payable {
        require(assets[_id].isForSale, "Asset is not for sale.");
        require(msg.value >= assets[_id].price, "Insufficient funds to purchase asset.");
        require(!assetIsOwned[_id], "Asset is already owned.");
        assets[_id].owner.transfer(msg.value);
        assetIsOwned[_id] = true;
        emit AssetBought(_id, msg.sender);
    }
    
    function streamAsset(uint _id) public {
        require(assets[_id].isStreamable, "Asset is not streamable.");
        require(assetIsOwned[_id], "Asset is not owned.");
        emit AssetStreamed(_id, msg.sender);
    }
    
}









